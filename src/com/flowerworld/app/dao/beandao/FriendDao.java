package com.flowerworld.app.dao.beandao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.flowerworld.app.dao.base.DaoSession;
import com.flowerworld.app.dao.bean.Friend;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table FRIEND.
 */
public class FriendDao extends AbstractDao<Friend, String> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property OrderNum = new Property(1, Integer.class, "orderNum", false, "ORDER_NUM");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property RealName = new Property(3, String.class, "realName", false, "REAL_NAME");
        public final static Property GroupID = new Property(4, String.class, "groupID", false, "GROUP_ID");
        public final static Property GroupName = new Property(5, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Company = new Property(6, String.class, "company", false, "COMPANY");
        public final static Property CompanyLevel = new Property(7, String.class, "companyLevel", false, "COMPANY_LEVEL");
        public final static Property Header = new Property(8, String.class, "header", false, "HEADER");
    }

    ;


    public FriendDao(DaoConfig config) {
        super(config);
    }

    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIEND' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "'ORDER_NUM' INTEGER," + // 1: orderNum
                "'USER_NAME' TEXT," + // 2: userName
                "'REAL_NAME' TEXT," + // 3: realName
                "'GROUP_ID' TEXT," + // 4: groupID
                "'GROUP_NAME' TEXT," + // 5: groupName
                "'COMPANY' TEXT," + // 6: company
                "'COMPANY_LEVEL' TEXT," + // 7: companyLevel
                "'HEADER' TEXT);"); // 8: header
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIEND'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();

        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }

        Integer orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindLong(2, orderNum);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }

        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(4, realName);
        }

        String groupID = entity.getGroupID();
        if (groupID != null) {
            stmt.bindString(5, groupID);
        }

        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(6, groupName);
        }

        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(7, company);
        }

        String companyLevel = entity.getCompanyLevel();
        if (companyLevel != null) {
            stmt.bindString(8, companyLevel);
        }

        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(9, header);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // orderNum
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realName
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupID
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // groupName
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // company
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // companyLevel
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // header
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrderNum(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRealName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompany(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompanyLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHeader(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(Friend entity, long rowId) {
        return entity.getID();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(Friend entity) {
        if (entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
