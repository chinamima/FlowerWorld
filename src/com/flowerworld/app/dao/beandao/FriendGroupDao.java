package com.flowerworld.app.dao.beandao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.flowerworld.app.dao.base.DaoSession;
import com.flowerworld.app.dao.bean.FriendGroup;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table FRIEND_GROUP.
 */
public class FriendGroupDao extends AbstractDao<FriendGroup, String> {

    public static final String TABLENAME = "FRIEND_GROUP";

    /**
     * Properties of entity FriendGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property OrderNum = new Property(1, Integer.class, "orderNum", false, "ORDER_NUM");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
    }

    ;


    public FriendGroupDao(DaoConfig config) {
        super(config);
    }

    public FriendGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIEND_GROUP' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "'ORDER_NUM' INTEGER," + // 1: orderNum
                "'NAME' TEXT);"); // 2: name
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIEND_GROUP'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, FriendGroup entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getID());

        Integer orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindLong(2, orderNum);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public FriendGroup readEntity(Cursor cursor, int offset) {
        FriendGroup entity = new FriendGroup( //
                cursor.getString(offset + 0), // ID
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // orderNum
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // name
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, FriendGroup entity, int offset) {
        entity.setID(cursor.getString(offset + 0));
        entity.setOrderNum(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(FriendGroup entity, long rowId) {
        return entity.getID();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(FriendGroup entity) {
        if (entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
