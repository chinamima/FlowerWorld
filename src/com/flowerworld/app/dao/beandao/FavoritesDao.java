package com.flowerworld.app.dao.beandao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.flowerworld.app.dao.base.DaoSession;
import com.flowerworld.app.dao.bean.Favorites;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FAVORITES.
*/
public class FavoritesDao extends AbstractDao<Favorites, String> {

    public static final String TABLENAME = "FAVORITES";

    /**
     * Properties of entity Favorites.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property OrderNum = new Property(1, Integer.class, "orderNum", false, "ORDER_NUM");
        public final static Property Favname = new Property(2, String.class, "favname", false, "FAVNAME");
        public final static Property CityName = new Property(3, String.class, "cityName", false, "CITY_NAME");
        public final static Property GroupID = new Property(4, String.class, "groupID", false, "GROUP_ID");
        public final static Property ProvinceName = new Property(5, String.class, "provinceName", false, "PROVINCE_NAME");
        public final static Property Company = new Property(6, String.class, "company", false, "COMPANY");
        public final static Property CompanyLevel = new Property(7, String.class, "companyLevel", false, "COMPANY_LEVEL");
        public final static Property Home = new Property(8, String.class, "home", false, "HOME");
        public final static Property Des = new Property(9, String.class, "des", false, "DES");
    };


    public FavoritesDao(DaoConfig config) {
        super(config);
    }
    
    public FavoritesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FAVORITES' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "'ORDER_NUM' INTEGER," + // 1: orderNum
                "'FAVNAME' TEXT," + // 2: favname
                "'CITY_NAME' TEXT," + // 3: cityName
                "'GROUP_ID' TEXT," + // 4: groupID
                "'PROVINCE_NAME' TEXT," + // 5: provinceName
                "'COMPANY' TEXT," + // 6: company
                "'COMPANY_LEVEL' TEXT," + // 7: companyLevel
                "'HOME' TEXT," + // 8: home
                "'DES' TEXT);"); // 9: des
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FAVORITES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Favorites entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        Integer orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindLong(2, orderNum);
        }
 
        String favname = entity.getFavname();
        if (favname != null) {
            stmt.bindString(3, favname);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(4, cityName);
        }
 
        String groupID = entity.getGroupID();
        if (groupID != null) {
            stmt.bindString(5, groupID);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(6, provinceName);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(7, company);
        }
 
        String companyLevel = entity.getCompanyLevel();
        if (companyLevel != null) {
            stmt.bindString(8, companyLevel);
        }
 
        String home = entity.getHome();
        if (home != null) {
            stmt.bindString(9, home);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(10, des);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Favorites readEntity(Cursor cursor, int offset) {
        Favorites entity = new Favorites( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // orderNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // favname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cityName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // provinceName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // company
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // companyLevel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // home
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // des
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Favorites entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrderNum(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFavname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCityName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvinceName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompany(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompanyLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHome(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDes(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Favorites entity, long rowId) {
        return entity.getID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Favorites entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
